name: Main Deployment Workflow
run-name: "Deployment Run #${{ github.run_number }} (via @${{ github.actor }})"

concurrency:
  group: "deploy"
  cancel-in-progress: false

on:
  push:
    branches: [main]
  # TODO: just for now... remove later :)
  pull_request:
    branches: [main]
  workflow_dispatch: {}

jobs:
  build_images:
    name: Build Images
    permissions:
      contents: "read"
      id-token: "write"
    uses: ./.github/workflows/image_build_and_publish.yml
    with:
      push_to_gcr: true

  deploy_infra_and_services:
    name: Deploy Infrastructure & Services
    runs-on: ubuntu-latest
    needs: [build_images]
    outputs:
      cloud_sql_instance_name: ${{ steps.tf_outputs.outputs.cloud_sql_instance_name }}
      database_url_secret_name: ${{ steps.tf_outputs.outputs.database_url_secret_name }}
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: "${{ vars.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ vars.GHA_SERVICE_ACCOUNT_EMAIL }}"
          access_token_scopes: "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/sqlservice.admin"
          token_format: access_token
          access_token_lifetime: 1800s

      - name: Utilize .terraform cache
        uses: actions/cache@v4
        with:
          path: terraform/.terraform
          key: ${{ hashFiles('terraform/.terraform.lock.hcl') }}

      - name: Read .terraform-version
        id: read_tf_version
        run: echo "terraform_version=$(awk '/terraform/ {print $2;}' .tool-versions)" | tee --append "$GITHUB_OUTPUT"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.read_tf_version.outputs.terraform_version }}
          terraform_wrapper: false

      - name: Set website_image Terraform Variable (via GITHUB_ENV)
        run: echo "TF_VAR_website_image=gcr.io/murga-o-matic/website:sha-${{ needs.build_images.outputs.short_sha_tag }}" | tee --append "$GITHUB_ENV"

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve

      - name: Record Terraform Outputs
        working-directory: ./terraform
        id: tf_outputs
        run: |
          terraform output -json \
            | jq -r 'select(.sensitive != "true") | to_entries | map("\(.key)=\(.value.value|tostring)")|.[]' \
            | tee --append "$GITHUB_OUTPUT"

  apply_database_migrations:
    name: Apple Database Migrations
    runs-on: ubuntu-latest
    needs: [deploy_infra_and_services]
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "${{ vars.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ vars.GHA_SERVICE_ACCOUNT_EMAIL }}"
          access_token_scopes: "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/sqlservice.admin"
          token_format: access_token
          access_token_lifetime: 1800s

      - name: Create Google application creds secret
        id: google_app_creds
        run: |
          creds="$(cat "$GOOGLE_APPLICATION_CREDENTIALS")"
          echo "::add-mask::$creds"
          echo "creds=$creds" | tee --append "$GITHUB_OUTPUT"

      - name: Start Google Cloud SQL Proxy
        uses: mattes/gce-cloudsql-proxy-action@v1
        with:
          creds: ${{ steps.google_app_creds.outputs.creds }}
          instance: ${{ needs.deploy_infra_and_services.outputs.cloud_sql_instance_name }}
          port: "5434"

      - name: Grab database_url from GCP Secret Manager
        id: gcp_secret_read
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            database_url:${{ needs.deploy_infra_and_services.outputs.database_url_secret_name }}

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Install poetry
        uses: abatilo/actions-poetry@v2

      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: poetry install --with=postgres

      - name: Perform Migrations
        run: poetry run python manage.py migrate
        env:
          DATABASE_URL: '${{ steps.gcp_secret_read.outputs.database_url }}'
          GOOGLE_CLOUD_PROJECT: "murga-o-matic"
          USE_CLOUD_SQL_AUTH_PROXY: "true"
